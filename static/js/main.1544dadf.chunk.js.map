{"version":3,"sources":["Styles/globalStyle.js","VariablesAndFunc/Functions.ts","components/Content/Content.tsx","App.tsx","Types/Tipes.ts","reportWebVitals.ts","Styles/Theme.ts","Redux/reducers/bitcoinReducer.ts","Redux/Saga/Saga.ts","Redux/Saga/rootSaga.ts","socketMiddleware.ts","Redux/redux.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","useAppSelector","useSelector","TIKER","BID","ASK","HIGH","LOW","LAST","columns","title","dataIndex","key","Content","useDispatch","table","state","counterSlice","console","log","data","map","item","i","id","bid","ask","high","low","last","pagination","dataSource","AppDivStyle","styled","div","ContentSectionStyle","section","App","ActionType","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ThemeLight","color","type1","type2","type3","size","type4","createSlice","name","initialState","reducers","setTikers","action","payload","setSingleCurrencies","index","currency","actions","connect","message","todoSaga","put","type","WS_SEND_MESSAGE","value","method","params","result","res","select","findIndex","symbol","property","all","takeEvery","WS_CONNECTED","WS_MESSAGE","rootSaga","fork","url","sagaMiddleware","createSagaMiddleware","socket","store","TypeSocket","on","dispatch","WS_DISCONNECTED","next","readyState","send","configureStore","reducer","middleware","MiddlewareArray","concat","logger","run","ReactDOM","render","theme","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1544dadf.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\nbody {\r\n  \r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont,  \"DINPro\", 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n}\r\n\r\n`\r\n\r\nexport default GlobalStyles","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { AppDispatch, RootState } from '../Redux/redux'\r\n\r\n\r\n\r\nexport function setCookie(name: any, value: any, options: any = {}) {\r\n\r\n    options = {\r\n      path: '/',\r\n      ...options\r\n    };\r\n  \r\n    if (options.expires instanceof Date) {\r\n      options.expires = options.expires.toUTCString();\r\n    }\r\n  \r\n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n  \r\n    for (let optionKey in options) {\r\n      updatedCookie += \"; \" + optionKey;\r\n      let optionValue = options[optionKey];\r\n      if (optionValue !== true) {\r\n        updatedCookie += \"=\" + optionValue;\r\n      }\r\n    }\r\n  \r\n    document.cookie = updatedCookie;\r\n  }\r\n  \r\n\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React, { FC, useEffect } from 'react'\r\nimport { Table, Tag, Space } from 'antd';\r\nimport { useAppDispatch, useAppSelector } from '../../VariablesAndFunc/Functions';\r\nimport { getWesoket } from '../../Redux/reducers/action';\r\n\r\nconst TIKER = 'Tiker'\r\nconst BID = \"Bid\"\r\nconst ASK = \"Ask\"\r\nconst HIGH = \"High\"\r\nconst LOW = \"LOW\"\r\nconst LAST = \"LAST\"\r\n\r\nconst columns = [\r\n  {\r\n    title: TIKER,\r\n    dataIndex: TIKER,\r\n    key: TIKER,\r\n  },\r\n  {\r\n    title: BID,\r\n    dataIndex: BID,\r\n    key: BID,\r\n  },\r\n  {\r\n    title: ASK,\r\n    dataIndex: ASK,\r\n    key: ASK,\r\n  },\r\n  {\r\n    title: HIGH,\r\n    dataIndex: HIGH,\r\n    key: HIGH,\r\n  },\r\n  {\r\n    title: LOW,\r\n    dataIndex: LOW,\r\n    key: LOW,\r\n  },\r\n  {\r\n    title: LAST,\r\n    dataIndex: LAST,\r\n    key: LAST,\r\n  },\r\n]\r\n\r\n\r\n\r\ntype Props = {\r\n\r\n}\r\n\r\n\r\nexport const Content: FC<Props> = () => {\r\n  const dispatch = useAppDispatch()\r\n  let table = useAppSelector(state => state.counterSlice.table)\r\n\r\n  console.log(\"table\")\r\n  let data = table.map((item, i) => {\r\n    return {\r\n      key: i,\r\n      [TIKER]: item.id,\r\n      [BID]: item.bid,\r\n      [ASK]: item.ask,\r\n      [HIGH]: item.high,\r\n      [LOW]: item.low,\r\n      [LAST]: item.last\r\n    }\r\n  })\r\n\r\n  return <Table pagination={false} dataSource={data} columns={columns} />\r\n}","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport { Content } from './components/Content/Content';\r\n\r\n\r\nconst AppDivStyle = styled.div`\r\n    display: grid;\r\n    grid-template-areas: \"content \";\r\n    width: 100%;\r\n    height: 100%;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr;\r\n\r\n`\r\n\r\nconst ContentSectionStyle = styled.section`\r\n  grid-area: content;\r\n`\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <AppDivStyle >\r\n          <ContentSectionStyle>\r\n            <Route path='/' component={Content} />\r\n          </ContentSectionStyle>\r\n        </AppDivStyle>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","\r\nexport enum ActionType {\r\n  WS_CONNECTED = \"WS_CONNECTED\",\r\n  WS_DISCONNECTED = \"WS_DISCONNECTED\",\r\n  WS_MESSAGE = \"WS_MESSAGE\",\r\n  WS_SEND_MESSAGE = \"WS_SEND_MESSAGE\",\r\n}\r\n\r\nexport interface MessageModel {\r\n  type: string;\r\n  value: GetTikersName \r\n}\r\nexport interface Tiker extends SubscriberType {\r\n  baseCurrency: string;\r\n  feeCurrency: string;\r\n  id: string;\r\n  provideLiquidityRate: string;\r\n  quantityIncrement: string;\r\n  quoteCurrency: string;\r\n  takeLiquidityRate: string;\r\n  tickSize: string;\r\n};\r\n\r\nexport interface GetTikersName {\r\n  id: 1;\r\n  jsonrpc: string;\r\n  result: Tiker[];\r\n}\r\n\r\nexport interface SubscriberType {\r\n  ask?: string;\r\n  bid?: string;\r\n  high?: string;\r\n  last?: string;\r\n  low?: string;\r\n  open?: string;\r\n  symbol?: string;\r\n  timestamp?: string;\r\n  volume?: string;\r\n  volumeQuote?: string;\r\n}\r\nexport interface SubscribeType {\r\n  jsonrpc: string;\r\n  method: string;\r\n  params: SubscriberType;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","let ThemeLight = {\r\n  color: {\r\n    type1: \"#D0D1D2\" as \"#D0D1D2\",\r\n    type2: \"#11263C\" as \"#11263C\",\r\n    type3: \"#F2F2F7\" as \"#F2F2F7\"\r\n  },\r\n  size: {\r\n    type1: \"12px\" as \"12px\",\r\n    type2: \"14px\" as \"14px\",\r\n    type3: \"16px\" as \"16px\",\r\n    type4: \"18px\" as \"18px\",\r\n  }\r\n};\r\n\r\ndeclare module \"styled-components\" {\r\n  export interface DefaultTheme extends ThemeLightType {}\r\n}\r\n\r\nexport type ThemeLightType = typeof ThemeLight\r\n\r\nexport default ThemeLight;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { SubscriberType, Tiker } from '../../Types/Tipes'\r\nimport type { RootState } from '../redux'\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface list {\r\n  userId: number,\r\n  id: number,\r\n  title: string,\r\n  body:  string\r\n}\r\n// Define the initial state using that type\r\nconst initialState = {\r\n  table: [] as Tiker[]\r\n}\r\n\r\n// Define a type for the slice state\r\nexport type BitcoinStateType = typeof initialState\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setTikers: (state, action: PayloadAction<Tiker[]>) => {\r\n      state.table = action.payload\r\n    },\r\n    setSingleCurrencies: (state, action: PayloadAction<{currency: SubscriberType, index: number}>) => {\r\n      const {index, currency} = action.payload\r\n      state.table[index] = {...state.table[index], ...currency}\r\n    }\r\n    \r\n  },\r\n  \r\n})\r\n\r\nexport const { setTikers, setSingleCurrencies } = counterSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counterSlice.value\r\n\r\nexport default counterSlice.reducer","import axios from \"axios\";\r\nimport {\r\n  all,\r\n  put,\r\n  takeEvery,\r\n  select,\r\n} from \"redux-saga/effects\";\r\nimport { ActionType, SubscriberType, Tiker } from \"../../Types/Tipes\";\r\nimport { setSingleCurrencies, setTikers } from \"../reducers/bitcoinReducer\";\r\nimport { RootState } from \"../redux\";\r\n\r\nfunction* connect() {\r\n  yield put({\r\n    type: ActionType.WS_SEND_MESSAGE,\r\n    value: {\r\n      method: \"getSymbols\",\r\n      params: {},\r\n      id: 1,\r\n    },\r\n  });\r\n\r\n  try {\r\n  } catch (e) {}\r\n}\r\n\r\nfunction* message(action: any) {\r\n  const { id, result, method, params } = action.value;\r\n\r\n  if (method && method === \"ticker\") {\r\n    let res: SubscriberType = params;\r\n\r\n    const state: RootState = yield select();\r\n    let { table } = state.counterSlice;\r\n\r\n    let index = table.findIndex((item, i) => {\r\n        if(item.id === res.symbol) {\r\n          if(!item.symbol) {\r\n            return true\r\n          }\r\n\r\n          if(item.symbol) {\r\n            for (let property in item) {\r\n              if (property in res) {\r\n                  // @ts-ignore\r\n                  if(item[property] !== res[property]) {\r\n                     return true\r\n                  }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        \r\n    })\r\n\r\n    console.log(index, \"index\")\r\n    if(index !== -1) {\r\n      yield put(setSingleCurrencies({currency: res, index}))\r\n      return\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (id === 1 && result) {\r\n    let res: Tiker[] = result;\r\n    yield put(setTikers(res));\r\n    yield all(\r\n      res.map(function (item, i) {\r\n        // if (i > 20) {\r\n        //   return;\r\n        // }\r\n        return put({\r\n          type: ActionType.WS_SEND_MESSAGE,\r\n          value: {\r\n            method: \"subscribeTicker\",\r\n            params: { symbol: item.id },\r\n            id: i + 2,\r\n          },\r\n        });\r\n      })\r\n    );\r\n    return;\r\n  }\r\n\r\n  try {\r\n  } catch (e) {}\r\n}\r\n\r\nfunction* todoSaga() {\r\n  yield all([\r\n    takeEvery(ActionType.WS_CONNECTED, connect),\r\n    takeEvery(ActionType.WS_MESSAGE, message),\r\n  ]);\r\n}\r\n\r\nexport default todoSaga;\r\n","import { all, fork } from \"redux-saga/effects\";\r\nimport todoSaga from \"./Saga\";\r\n\r\nexport function* rootSaga() {\r\n  yield all([fork(todoSaga)]);\r\n}","import { MiddlewareAPI } from 'redux';\r\nimport { TypeSocket } from 'typesocket';\r\n\r\nimport { ActionType, MessageModel } from './Types/Tipes'; // Your enum with action types.\r\n\r\n\r\nexport const socketMiddleware = (url: string) => {\r\n    return (store: MiddlewareAPI<any, any>) => {\r\n        const socket = new TypeSocket<MessageModel>(url);\r\n        \r\n        // We dispatch the actions for further handling here:\r\n        socket.on('connected', () => store.dispatch({ type: ActionType.WS_CONNECTED }));\r\n        socket.on('disconnected', () => store.dispatch({ type: ActionType.WS_DISCONNECTED }));\r\n        socket.on('message', (message) => store.dispatch({ type: ActionType.WS_MESSAGE, value: message }));\r\n        socket.connect();\r\n\r\n        return (next: (action: any) => void) => (action: any) => {\r\n            // We're acting on an action with type of WS_SEND_MESSAGE.\r\n            // Don't forget to check if the socket is in readyState == 1.\r\n            // Other readyStates may result in an exception being thrown.\r\n            if (action.type && action.type === ActionType.WS_SEND_MESSAGE && socket.readyState === 1) {\r\n                socket.send(action.value);\r\n            }\r\n\r\n            return next(action);\r\n        };\r\n    };\r\n};","import { configureStore, MiddlewareArray } from '@reduxjs/toolkit'\r\nimport counterSlice  from './reducers/bitcoinReducer'\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport logger from 'redux-logger'\r\nimport { rootSaga } from './Saga/rootSaga';\r\nimport { socketMiddleware } from './../socketMiddleware';\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst socket = socketMiddleware(\"wss://api.exchange.bitcoin.com/api/2/ws\")\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counterSlice,\r\n  },\r\n  middleware: new MiddlewareArray().concat(socket, sagaMiddleware, logger),\r\n})\r\n\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport GlobalStyles from \"./Styles/globalStyle.js\"\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ThemeLight from \"./Styles/Theme\"\r\nimport { ThemeProvider } from 'styled-components';\r\nimport 'antd/dist/antd.css';\r\nimport { store } from './Redux/redux';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ThemeProvider theme={ThemeLight}>\r\n      <React.StrictMode>\r\n        <GlobalStyles />\r\n        <App />\r\n      </React.StrictMode>\r\n    </ThemeProvider>\r\n  </Provider>\r\n\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}